2014-01-07  Titus Brown  <t@Titus-MacBook-Air-2.local>

 # Initialized repository, created server.py and README.

2014-01-14  Ethan Ettema
 # Successfully completes HTTP requests and sends User-Agent info to terminal
2014-01-22  Ethan Ettema
 # No long send User-Agent info to terminal.
 # Home page display links to content, file, and image pages
 # Links work correctly with different content
 # Able to handle post/get requests seperately
 # Added tests for each new path, and posts/gets

2014-01-29 Ethan Ettema
 # There are now two forms, one submitted via POST, the other GET

2014-02-05 Ethan Ettema
 # New form of type multipart/form-data
 # Templating used to generate html
 # Requests of variable size work correctly

2014-02-12 Ethan Ettema
 # Added wsgi app stuff for hw5
 # Added template inheritance


2014-03-20 Ethan Ettema
 # Added command line features to run specific app on a specific port (if specified)
 #      -A <app> -p <port>, port is optional
 # Added twill tests for each URL
 # Added javascript/ajax to upload a file
 # Once upload button has been clicked, alert will say the button has been clicked
 #    then upon a successful upload, will tell you and redirect to home page
 #    else, alert will say upload failed

2014-03-25 Ethan Ettema
 # Added command line features to run quotes and chat app
 # Added ability to upload jpg or tiff files
 # filetype was added to __init__.py and as a parameter to add_image function
 #    filetype is determined in root.py as part of the request
 #    images is now a list of that contains the data and the type of image
 #    this data and imagetype or passed as a parameter to add_image
 # *** note *** tiffs are not support in mozilla or chrome, but work in safari

 2014-04-02
 # Added the url 'listimages' to display all currently uploaded images.
 # Added a function in root.py to retrieve a specific image
 # That function is called in 'listimages.html' as the list of images is iterated through
 #     after being set in root.py 'listimages' function

 # I set up a Virtual Machine using Digital Ocean.
      Going to their site and creating a droplet is super easy and cheap.
      After setting up the details, an email will be sent to you and you can ssh into your droplet.
      Update and upgrade the server
      Install python-dev, pip, nginx, git, and then virtualenv
      Make a directory to store your apps
      Create a virtual environment.  In it, install: uwsgi, quixote, and jinja2
      Now you can pull imageapp from a git repository.
      To run it you need a wsgi.py file to run.
      Run the app by using "uwsgi --socket 0.0.0.0:8080 --protocol=http -w wsgi"
         Now go to the IP address of your droplet and go to port 8080
         

 2014-04-09 Ethan Ettema
 # Added sqlite3 database
 # Added cookieapp and twill tests
 # Project #3 - I grabbed the "Cloudy Water Sports" template from owsg.org
 #     Included this in my templates directory and included it in base.html
 # Project #11 - Include jquery to check the size of a file before uploading
 #     Max of 5 MB allowed

 2014-04-16 Ethan Ettema
- Project #16 - Added data persistence with sqlite.  The latest image from
-      the database is always displayed, regardless if server is stopped.
-      Viewing the list of all images grabs all images previously uploaded.
- Project #17 - Added multithreading to the server.  As new connections are
-      made, the name of each new thread is printed off to the terminal
-      confirming that it is functioning correctly.

 2014-04-23 Ethan Ettema
- Project #
